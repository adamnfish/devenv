package com.gu.devenv

import scala.util.{Success, Failure}
import java.nio.file.Paths

/** Natively compiled tool that wraps the Scala logic in a CLI program.
  */
object Main {
  def main(args: Array[String]): Unit = {
    args.headOption match {
      case Some("init")     => init()
      case Some("generate") => generate()
      case Some(unknown) =>
        System.err.println(s"Unknown command: $unknown")
        printUsage()
        sys.exit(1)
      case None =>
        System.err.println("No command provided.")
        printUsage()
        sys.exit(1)
    }
  }

  private def printUsage(): Unit = {
    println(
      """Usage: devenv <command>
        |
        |Commands:
        |  init      Initialize .devcontainer directory structure
        |  generate  Generate devcontainer.json files from .devenv config
        |""".stripMargin
    )
  }

  /** Sets up a .devcontainer directory with nested subdirectories.
    *
    * Uses the project's devenv configuration file to generate:
    *   - .devcontainer/user/ (for user-specific devcontainer with merged
    *     preferences)
    *   - .devcontainer/shared/ (for project-specific devcontainer that can be
    *     checked in)
    *   - .devcontainer/.gitignore (to exclude user directory)
    *   - .devcontainer/devenv.conf (project-specific configuration file)
    *
    * The devcontainer.json files can be generated by running the generate
    * command after populating the project's `.devenv` settings file.
    */
  def init(): Unit = {
    val devcontainerDir = Paths.get(".devcontainer")

    Devenv.init(devcontainerDir) match {
      case Success(result) =>
        println(Output.initResultMessage(result))
      case Failure(exception) =>
        System.err.println(s"Initialization failed: ${exception.getMessage}")
        exception.printStackTrace()
        sys.exit(1)
    }
  }

  /** Generates two devcontainer files for the current project, using the
    * provided devenv configuration.
    *
    * A user-specific file that includes properties merged from the users' own
    * system-wide devenv settings, and a generic user-agnostic devcontainer file
    * that can be checked into the repo and used for remote cloud devcontainers.
    */
  def generate(): Unit = {
    val devcontainerDir = Paths.get(".devcontainer")
    val userConfigPath =
      Paths.get(System.getProperty("user.home"), ".config", "devenv")

    Devenv.generate(devcontainerDir, userConfigPath) match {
      case Success(result) =>
        println(Output.generateResultMessage(result))
      case Failure(exception) =>
        System.err.println(s"Generation failed: ${exception.getMessage}")
        exception.printStackTrace()
        sys.exit(1)
    }
  }
}
